{
	"version": "https://jsonfeed.org/version/1.1",
	"title": "Web to know",
	"language": "en",
	"home_page_url": "https://webtoknow.com/web-to-know-website/",
	"feed_url": "https://webtoknow.com/web-to-know-website/feed/feed.json",
	"description": "Explore web technologies, IOT, security, and IT jobs with our informative blog featuring in-depth tutorials and articles.",
	"items": [
		{
			"id": "https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/",
			"url": "https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/",
			"title": "How to CRUD a REST API with Angular",
			"content_html": "<p>This tutorial will provide an introduction to working with REST APIs and Angular, and will cover the key concepts and techniques needed to build web applications that can <code>CREATE</code>, <code>READ</code>, <code>UPDATE</code>, and <code>DELETE</code> data on a server. To be more precise, we will be managing a list of dogs on a server. üê∂üêïüê∂üêï</p>\n<h2 id=\"install-nodejs-optional\" tabindex=\"-1\">Install Nodejs (Optional) <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<blockquote>\n<p>Do this if you don't have Nodejs installed on your local machine.</p>\n</blockquote>\n<p>To install Node.js on Windows, you can download the installer from the <a href=\"https://nodejs.org/en/download/\">Node.js website</a> and follow the prompts to install the latest version of Node.js on your system.</p>\n<p>To install Node.js on Linux, you can use a package manager such as apt-get or yum. For example, to install Node.js on Ubuntu using apt-get, you can run the following commands:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> nodejs</code></pre>\n<p>To install Node.js on MacOS, you can use the Homebrew package manager. First, you will need to install Homebrew by running the following command:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">/usr/bin/ruby <span class=\"token parameter variable\">-e</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/master/install<span class=\"token variable\">)</span></span>\"</span></code></pre>\n<p>Once Homebrew is installed, you can use it to install Node.js by running the following command:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> <span class=\"token function\">node</span></code></pre>\n<p>Once Node.js is installed, you can verify the installation by running the node -v command, which should print the installed version of Node.js. You can also use the npm command to manage packages and dependencies for your Node.js projects.</p>\n<h2 id=\"start-and-configure-mock-server\" tabindex=\"-1\">Start and configure mock server <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>JSON-server is a Node.js based tool for quickly creating a mock server that can be used for testing and development purposes. It is designed to be easy to use and set up, and provides a simple way to create a fake REST API by defining the data in a db.json file.</p>\n<p>To start a mock server using JSON-server, you will need to install the JSON-server package from npm. You can do this by running the following command:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> json-server</code></pre>\n<p>Once you have installed the JSON-server package, you can create a new file called db.json in the directory where you want to run your mock server. This file will be used to store the data for your mock server.</p>\n<p>Next, you can populate the db.json file with some sample data. This can be any JSON data that you want to use for your mock server. For example:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"dogs\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AFFENPINSCHER\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"img\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://images.dog.ceo/breeds/affenpinscher/n02110627_8099.jpg\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AKITA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"img\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://images.dog.ceo//breeds//akita//An_Akita_Inu_resting.jpg\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CHIHUAHUA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"img\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://images.dog.ceo/breeds/chihuahua/n02085620_7613.jpg\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"LHASA\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"img\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://images.dog.ceo/breeds/lhasa/n02098413_7358.jpg\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"HOUND\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"img\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://images.dog.ceo/breeds/hound-afghan/n02088094_2626.jpg\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Once you have your db.json file set up, you can start the mock server by running the following command:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">json-server <span class=\"token parameter variable\">--watch</span> db.json <span class=\"token parameter variable\">-p</span> <span class=\"token number\">4000</span></code></pre>\n<p>This will start the mock server on port 4000. You can access the server by visiting http://localhost:4000 in your web browser. The server will automatically reload when you make changes to the db.json file, so you can easily update the data on your mock server as needed.</p>\n<p>Visiting the link <a href=\"http://localhost:4000/dogs/1\">http://localhost:4000/dogs/1</a>, you should see:</p>\n<pre class=\"language-json\" tabindex=\"0\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"typicode\"</span> <span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"angular-create-new-project\" tabindex=\"-1\">Angular create new project <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>To create a new Angular project, you will need to have the Angular CLI installed on your system. You can install the <a href=\"https://angular.io/cli\">Angular CLI</a> by running the following command:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> @angular/cli</code></pre>\n<p>Once the Angular CLI is installed, you can create a new Angular project by running the following command:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">ng new my-dogs</code></pre>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">? Do you want to enforce stricter <span class=\"token builtin class-name\">type</span> checking and stricter bundle budgets <span class=\"token keyword\">in</span> the workspace?\n  This setting helps improve maintainability and catch bugs ahead of time.\n  For <span class=\"token function\">more</span> information, see https://angular.io/strict No\n? Would you like to <span class=\"token function\">add</span> Angular routing? No\n? Which stylesheet <span class=\"token function\">format</span> would you like to use? CSS</code></pre>\n<p>This will create a new directory called <code>my-dogs</code> containing the scaffolding for a new Angular project. You can then navigate to the <code>my-dogs</code> directory and run the <code>ng serve</code> command to start the development server and begin working on your project.</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> my-dogs\nng serve</code></pre>\n<p>Visiting the link <a href=\"http://localhost:4000\">http://localhost:4200</a>, you should see the new Angular application.</p>\n<h2 id=\"add-material-ui\" tabindex=\"-1\">Add Material-UI <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>To add Material to an Angular project using schematics, you can use the <code>ng add</code> command. This command will add the Material package to your project and also update your project with the required configuration for Material:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">ng <span class=\"token function\">add</span> @angular/material</code></pre>\n<p>This command will install the latest version of Material and all of its dependencies, and will also update your Angular project with the required configuration for Material.</p>\n<p>After running this command, you should be able to use Material components in your Angular project by importing them from the @angular/material module.</p>\n<p>For more detailed instructions on how to add Angular Material to your project, you can refer to the <a href=\"https://material.angular.io/guide/getting-started#install-angular-material\">Angular Material documentation</a>.</p>\n<h2 id=\"removing-unnecessary-code\" tabindex=\"-1\">Removing unnecessary code <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>Let's remove all unnecessary HTML from the newly created <code>app.component.html</code> component.</p>\n<h2 id=\"get-the-dogs-list-from-server\" tabindex=\"-1\">Get the dogs list from server. <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>To get a list of dogs from a server in Angular using a service, you can create a service that makes an HTTP GET request to the server to retrieve the list of dogs. You can then inject this service into any component that needs to access the list of dogs, and use the service to make the HTTP request.</p>\n<p>First thing you need to do is generate the dog's by creating new class:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">ng generate interface dog</code></pre>\n<p>unde o sa punem modelul listei de catei:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">  <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token literal-property property\">img</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>To create a service in Angular, you would first need to generate a new service using the Angular CLI. You can do this by running the following command:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">ng generate <span class=\"token function\">service</span> <span class=\"token variable\"><span class=\"token variable\">`</span>dogs<span class=\"token variable\">`</span></span></code></pre>\n<p>Here's an example of how you might create a CRUD service:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HttpClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/common/http'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Observable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'rxjs/internal/Observable'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Dog <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./dog'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">providedIn</span><span class=\"token operator\">:</span> <span class=\"token string\">'root'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DogsService</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> <span class=\"token literal-property property\">http</span><span class=\"token operator\">:</span> HttpClient</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getDogs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:4000/dogs'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Observable<span class=\"token operator\">&lt;</span>Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">addDog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">postObject</span><span class=\"token operator\">:</span> Dog</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:4000/dogs'</span><span class=\"token punctuation\">,</span> postObject<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Observable<span class=\"token operator\">&lt;</span>Dog<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">updateDog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">postObject</span><span class=\"token operator\">:</span> Dog</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:4000/dogs/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>postObject<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> postObject<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Observable<span class=\"token operator\">&lt;</span>Dog<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">deleteDog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:4000/dogs/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> Observable<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>In the above example, we create a service called <code>DogsService</code> using Angular CLI.\nWe then import the <code>HttpClient</code> module and inject it into the service.\nWe can then use the <code>HttpClient</code> to make HTTP requests to a backend API.\nWe then  added methods to handle the CRUD operations (i.e. addDog(), getDogs() updateDog(), deleteDog()) as needed.</p>\n<p>In our component, we need a variable to store this list:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnInit</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">dogs</span><span class=\"token operator\">:</span> Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span></code></pre>\n<p>We fetch the list of dogs using a <code>GET</code> request:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">  <span class=\"token function\">getDogs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dogsService<span class=\"token punctuation\">.</span><span class=\"token function\">getDogs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dogs <span class=\"token operator\">=</span> response<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>We call the previously created function when the component is initialized:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDogs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"displaying-the-list-of-dogs\" tabindex=\"-1\">Displaying the list of dogs <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>We use the <a href=\"https://material.angular.io/components/table/overview\">Material-UI</a> table as an example to display the list of dogs:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">mat-raised-button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addButton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Add<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">mat-table</span> <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dogs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mat-elevation-z8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-container</span> <span class=\"token attr-name\">matColumnDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">mat-header-cell</span> <span class=\"token attr-name\">*matHeaderCellDef</span><span class=\"token punctuation\">></span></span> Name <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">mat-cell</span> <span class=\"token attr-name\">*matCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-container</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-container</span> <span class=\"token attr-name\">matColumnDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">mat-header-cell</span> <span class=\"token attr-name\">*matHeaderCellDef</span><span class=\"token punctuation\">></span></span> Image <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">mat-cell</span> <span class=\"token attr-name\">*matCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[attr.src]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>element.img<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[attr.alt]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>element.name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-container</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ng-container</span> <span class=\"token attr-name\">matColumnDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>actions<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span> <span class=\"token attr-name\">mat-header-cell</span> <span class=\"token attr-name\">*matHeaderCellDef</span><span class=\"token punctuation\">></span></span> Action <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">mat-cell</span> <span class=\"token attr-name\">*matCellDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let element<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>editButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mat-raised-button</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Editare<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">mat-raised-button</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Stergere<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ng-container</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span> <span class=\"token attr-name\">mat-header-row</span> <span class=\"token attr-name\">*matHeaderRowDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>displayedColumns<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span> <span class=\"token attr-name\">mat-row</span> <span class=\"token attr-name\">*matRowDef</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>let row; columns: displayedColumns;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>We create a new variable in the component to store the column names:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">  <span class=\"token operator\">...</span>\n  <span class=\"token literal-property property\">dogs</span><span class=\"token operator\">:</span> Dog<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token literal-property property\">displayedColumns</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'actions'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">...</span></code></pre>\n<p>For each dog, we display the name, image, and action buttons: <code>Edit</code> and <code>Delete</code>.</p>\n<h2 id=\"styling-the-list-of-dogs\" tabindex=\"-1\">Styling the list of dogs <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>To improve the design, we add the following styles in <code>app.component.css</code>:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">.img</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">table</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.addButton</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.editButton</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"deleting-an-element-from-the-list-of-dogs\" tabindex=\"-1\">Deleting an element from the list of dogs <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>We delete an element from the list of dogs using a <code>DELETE</code> request:</p>\n<p>Add the delete method to <code>app.component.ts</code>:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">  <span class=\"token function\">deleteDog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dogsService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteDog</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDogs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>and in <code>app.component.html</code>, add the button event:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">mat-raised-button</span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primary<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>deleteDog(element.id)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Stergere<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"adding-and-editing-an-element-from-the-list-of-dogs\" tabindex=\"-1\">Adding and editing an element from the list of dogs <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/tutorials/crud-angular/\">#</a></h2>\n<p>We insert the Add button above the table:</p>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">mat-raised-button</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addButton<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addDog()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Adaugare<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">mat-table</span> <span class=\"token attr-name\">[dataSource]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dogs<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mat-elevation-z8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n...</code></pre>\n<p>The method that adds a new element will open a modal with an empty form:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">  <span class=\"token function\">addDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dialogRef <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dialog<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>FormComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token string\">'650px'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">img</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dialogRef<span class=\"token punctuation\">.</span><span class=\"token function\">afterClosed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDogs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>The method that edits an element will open a modal that contains details about the dog:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\">  <span class=\"token function\">editDog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">dog</span><span class=\"token operator\">:</span> Dog</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> dialogRef <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dialog<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>FormComponent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> <span class=\"token string\">'650px'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>dog <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dialogRef<span class=\"token punctuation\">.</span><span class=\"token function\">afterClosed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDogs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>We create a new form component in the <code>src/app</code> directory that will contain the inputs and save logic:</p>\n<pre class=\"language-bash\" tabindex=\"0\"><code class=\"language-bash\">ng generate component form</code></pre>\n<pre class=\"language-html\" tabindex=\"0\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">mat-dialog-content</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mat-form-field</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">matInput</span> <span class=\"token attr-name\">[(ngModel)]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data.name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mat-form-field</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mat-form-field</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">matInput</span> <span class=\"token attr-name\">[(ngModel)]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>data.img<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Image url<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mat-form-field</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">mat-dialog-actions</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">mat-button</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>closeModal()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Anulare<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">mat-button</span> <span class=\"token attr-name\">cdkFocusInitial</span> <span class=\"token attr-name\">(click)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>saveDog()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Save<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>We save a dog using the saveDog method and <code>POST</code> and <code>PUT</code> requests:</p>\n<pre class=\"language-js\" tabindex=\"0\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> Inject <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MatDialogRef<span class=\"token punctuation\">,</span> <span class=\"token constant\">MAT_DIALOG_DATA</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/material/dialog'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Dog <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../dog'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> DogsService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../dogs.service'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">selector</span><span class=\"token operator\">:</span> <span class=\"token string\">'app-form'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">templateUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">'./form.component.html'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">styleUrls</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./form.component.css'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FormComponent</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\"><span class=\"token keyword\">public</span> <span class=\"token literal-property property\">dialogRef</span><span class=\"token operator\">:</span> MatDialogRef<span class=\"token operator\">&lt;</span>FormComponent<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">private</span> <span class=\"token literal-property property\">dogsService</span><span class=\"token operator\">:</span> DogsService<span class=\"token punctuation\">,</span>\n    @<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAT_DIALOG_DATA</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> Dog</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">closeModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dialogRef<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">saveDog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dogsService<span class=\"token punctuation\">.</span><span class=\"token function\">updateDog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dialogRef<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dogsService<span class=\"token punctuation\">.</span><span class=\"token function\">addDog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dialogRef<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Finally, we style the modal:</p>\n<pre class=\"language-css\" tabindex=\"0\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.container > *</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n",
			"date_published": "2023-01-05T00:00:00Z",
      "authors": [
        {
          "name": "Bogdan Mihai Nicolae",
          "url": "youremailaddress@example.com"
        }
      ]

		},
		{
			"id": "https://webtoknow.com/web-to-know-website/blog/jobs-in-it/ui-ux-designer/",
			"url": "https://webtoknow.com/web-to-know-website/blog/jobs-in-it/ui-ux-designer/",
			"title": "What does a UX/UI do?",
			"content_html": "<p>Today we're going to talk about a very interesting new job in the IT industry, that of UX / UI Designer. Watch this video and you will find out what this job entails, which are the stages that a product in the design phase goes through, what skills a designer must have, and what a day's work looks like.</p>\n<h2 id=\"what-does-it-mean-to-be-a-ux-ui-designer\" tabindex=\"-1\">What does it mean to be a UX / UI Designer? <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/jobs-in-it/ui-ux-designer/\">#</a></h2>\n<p>UX is the acronym for User Experience and represents the perception that a person has about the product they interact with, it is the experience that the user has when using the application.\nUI is the abbreviation for User Interface and refers to the entire design of the product, namely everything that users see on their screen: text, buttons, colors, and icons.\nSo, a UX / UI Designer is the person who makes sure that users have a friendly interaction with the application. The process begins with the design of the UX  (User Experience) and continues with the drawing of the interface, which is the UI. Both branches are equally important and work together to achieve a  simple, intuitive, and pleasing-to-the-eye application.\nTo be more precise, a designer turns THIS into THIS.\nThe role of a designer in the project is crucial, as the primary purpose of an application is to meet the needs of its users. No matter how brilliant the idea of the project is, how impeccable the implementation was or how good the marketing was, the application will never be successful if its users have difficulty using it.\nAs an example, we all know the Google search engine, but it was not the first one made (Yahoo, Lycos, or AltaVista being just a few examples that existed before it) but it was the only one that made finding the most relevant information for users easy and accessible to anyone.</p>\n<h2 id=\"what-are-the-design-steps\" tabindex=\"-1\">What are the design steps? <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/jobs-in-it/ui-ux-designer/\">#</a></h2>\n<ol>\n<li>The first stage is the project definition stage, where the designer conducts a series of interviews with clients, thus finding out information about the project purpose, business needs, deadlines, financial and technical constraints, main competitors, and target audience.</li>\n<li>The second stage, user research, focuses on in-depth knowledge of the target audience using methods such as direct interviews, focus groups, or online questionnaires. The goal is to understand the needs, desires, fears, frustrations, motivations, and behaviors of users to obtain a useful and valuable final product. After that, the designer collects and analyzes the data obtained to define:\n<ul>\n<li>User profiles, called personas in the design world, contain information about the typologies of the target users of the product, including demographics, preferences, habits, positive and negative assessments</li>\n<li>The user's travel map, representing a diagram that visually illustrates the steps a user takes in a real or possible scenario</li>\n</ul>\n</li>\n<li>The third stage, the actual design, includes the creation of information architecture, drawing sketches, and making prototypes of the interface.\nIn more detail:\n<ul>\n<li>The information architecture represents the way of organizing and structuring the content of the application so that users can easily navigate through it and find the desired information in a fast and efficient way.</li>\n<li>To build the navigation functionality in the application, it is necessary to create user navigation flows, namely diagrams that visualize the path that the user has when using the application, from the entry point to the last interaction.</li>\n<li>Application screens begin to be defined through low-fidelity prototypes or wireframes, two-dimensional sketches of screens that serve to present the structure, content, and visual hierarchy of a page.</li>\n<li>Subsequently, the designer outlines high-fidelity prototypes, which focus on visual design (final graphics, icons, colors, fonts, animations) and the user's interaction with the interface, being a faithful simulation of the final product.</li>\n<li>To ensure that the product is implemented according to prototypes, the designer has the responsibility to document the design specifications for developers, and on large projects to collaborate with developers and create a design system.</li>\n</ul>\n</li>\n<li>The last step for a UX / UI designer is evaluation. This consists of testing prototypes with real users to obtain feedback and ideas to improve the solutions already outlined in the previous stages. Based on these, the designer redraws certain previous steps of the design process, to ensure that the implemented solution will meet the expectations and needs of both end users and customers and business purposes.</li>\n<li>The designer also participates in the process of implementing the application, supervising and adjusting the design where appropriate, as well as the design of new features and screens that will be included in later versions.\nWhat skills do you need to have?\nThe skills a UX / UI Designer needs include:\n<ul>\n<li>UX research skills, from cognitive psychology to computer science, all can be used in the research process</li>\n<li>Technical and design skills - wireframing and prototyping - with the help of various software designed for this purpose: Sketch, Adobe XD, Figma, Adobe Photoshop, InVision, Adobe Illustrator, or Balsamiq</li>\n<li>Empathy - is the ability to put yourself in the shoes of different types of users and to understand their needs, problems, and desires to be able to find a solution as suitable as possible for them</li>\n<li>Collaboration and communication, so that the final product meets both the needs of users and business purposes</li>\n<li>Analytical skills to interpret and monitor the relationship of users with the application. One tool that helps in this regard is Google Analytics</li>\n<li>Attention to detail and creative thinking, to make a product that users can interact with in the most pleasant way</li>\n<li>Organizational and mediation skills are needed in brainstorming meetings, focus groups, workshops, or interviews</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"what-to-do-at-work\" tabindex=\"-1\">What to do at work <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/jobs-in-it/ui-ux-designer/\">#</a></h2>\n<p>A UX / UI designer can have many types of activities during the day. Can work on creating wireframes, prototypes, or visual designs. He can participate in interviews with users or focus groups to identify issues or preferences of the target audience, which he will later use to make the best version of the application. Or it can have meetings with other team members, developers, business analysts, and project managers, to work together to adjust the design where appropriate, but also to brainstorm on new features and screens that will be included in future versions. Every day can be a unique combination of research, communication, teamwork, and creation, which makes this job interesting and challenging.</p>\n<h2 id=\"final-words\" tabindex=\"-1\">Final words <a class=\"header-anchor\" href=\"https://webtoknow.com/web-to-know-website/blog/jobs-in-it/ui-ux-designer/\">#</a></h2>\n<p>Finally, I would like to emphasize once again the importance of a UX / UI Designer for the product. The simplicity and ease of use help customers to enjoy using the application we develop, in fact, for them. In hope that you have an idea about this job and that you want to follow us further, like this video and subscribe to our channel. Did you know that there are jobs in the IT industry that do not involve programming, such as this one?\nWe look forward to hearing from you in the comments section. My name is Dana and thank you for following me to the end!</p>\n",
			"date_published": "2023-01-05T00:00:00Z",
      "authors": [
        {
          "name": "Dana Maria Nicolae",
          "url": "youremailaddress@example.com"
        }
      ]

		},
		{
			"id": "https://webtoknow.com/web-to-know-website/blog/jobs-in-it/",
			"url": "https://webtoknow.com/web-to-know-website/blog/jobs-in-it/",
			"title": "Jobs in IT",
			"content_html": "<p>As the world becomes increasingly digital, the demand for skilled IT professionals continues to grow. One area of the IT industry that has seen significant growth in recent years is web development. From business analysts to support engineers, web development is an exciting field that offers a wide range of career opportunities.</p>\n<p>Web development is a rapidly growing field within the broader IT industry, and there are many different roles that one can play within this field. In this blog post, we will explore some of the most common jobs in web development, along with the technical skills that are typically required for each role.</p>\n<p>First up is the business analyst. As a business analyst in web development, you will be responsible for understanding the needs of the client or business and translating them into technical requirements. This may involve working closely with stakeholders to gather and document their requirements, and then using those requirements to create functional and technical specifications for the web application or website. To be successful in this role, you will need strong analytical and problem-solving skills, as well as a good understanding of business processes and the ability to communicate effectively with both technical and non-technical team members.</p>\n<p>Next is the UI-UX designer. This role focuses on the look and feel of the web application or website, as well as the user experience. As a UI-UX designer, you will be responsible for creating wireframes, mockups, and prototypes, and working with the development team to ensure that the final product meets the needs of the user. To be successful in this role, you will need a strong eye for design and a good understanding of user experience principles. You will also need to be proficient in design tools such as Photoshop and Sketch, and be able to create high-fidelity designs that can be used by the development team.</p>\n<p>The architect is another important role in web development. As an architect, you will be responsible for designing the overall structure and flow of the web application or website. This may involve creating high-level diagrams, flow charts, and other technical documents that outline how the different components of the application will fit together. To be successful in this role, you will need a strong understanding of web technologies and architecture patterns, as well as the ability to think abstractly and solve complex problems</p>\n",
			"date_published": "2023-01-05T00:00:00Z",
      "authors": [
        {
          "name": "Bogdan Mihai Nicolae",
          "url": "youremailaddress@example.com"
        },
        {
          "name": "Dana Maria Nicolae",
          "url": "youremailaddress@example.com"
        }
      ]

		}
	]
}
